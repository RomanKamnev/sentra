# main_local.py

import os
import json
import re
from openai import OpenAI
from openai.types.chat import ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam
from parser.alert_parser import parse_alert, analyze_alert
from prompt.prompt_builder import build_prompt
from retriever.context_retriever import retrieve_context
from llm.client import LLMClient
from parser.response_parser import parse_llm_response

client = OpenAI(api_key=os.getenv(
    "OPENAI_API_KEY",
    ""
))

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM ---
def generate_prompt(alert) -> str:
    return (
        f"You are a cybersecurity incident response analyst.\n\n"
        f"You have received the following alert:\n\n"
        f"- Event Type: {alert.event_type}\n"
        f"- IP Address: {alert.ip or 'Unknown'}\n"
        f"- Number of Failures: {alert.failures if alert.failures is not None else 'Unknown'}\n"
        f"- Severity Level: {alert.severity}\n"
        f"- Username involved: unknown user\n\n"
        f"Before selecting an action, carefully assess:\n"
        f"- The severity and potential impact of the event\n"
        f"- The likelihood that this activity is malicious\n"
        f"- The risk of false positives vs blocking legitimate users\n"
        f"- The urgency of the threat and its possible spread\n\n"
        f"Then choose ONE of the following actions:\n\n"
        f"- Block the IP immediately\n"
        f"- Start active monitoring but do not block yet\n"
        f"- Investigate further before taking action\n"
        f"- Ignore the event (false positive or low risk)\n\n"
        f"Respond strictly in the following format:\n"
        f"Action: <Block / Monitor / Investigate / Ignore>\n"
        f"Reason: <Concise explanation based on your assessment>"
    )

# --- –ó–∞–ø—Ä–æ—Å –∫ LLM ---
def query_llm(prompt: str) -> str:
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            ChatCompletionSystemMessageParam(role="system", content="You are a cybersecurity incident response analyst."),
            ChatCompletionUserMessageParam(role="user", content=prompt)
        ],
        temperature=0.2,
    )
    return response.choices[0].message.content.strip()

# --- –ü–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM ---
def postprocess_llm_response(response_text: str) -> dict:
    action_match = re.search(r"Action:\s*(\w+)", response_text, re.IGNORECASE)
    reason_match = re.search(r"Reason:\s*(.*)", response_text, re.IGNORECASE | re.DOTALL)

    action = action_match.group(1).strip().lower() if action_match else "unknown"
    reason = reason_match.group(1).strip() if reason_match else "unknown reason"

    return {
        "action": action,
        "reason": reason
    }

# --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ä–µ—à–µ–Ω–∏—é LLM ---
def execute_action(action: str, ip: str):
    if action == "block":
        print(f"üö´ Blocking IP: {ip}")
        # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ firewall API)
    elif action == "monitor":
        print(f"üëÄ Monitoring IP: {ip}")
    elif action == "investigate":
        print(f"üîç Investigating IP: {ip}")
    elif action == "ignore":
        print(f"‚úÖ Ignoring IP: {ip}")
    else:
        print(f"‚ö†Ô∏è Unknown action for IP: {ip}")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—à–µ–Ω–∏–π –≤ —Ñ–∞–π–ª ---
def log_decision(alert_text: str, parsed_alert, llm_response: str, decision: dict):
    log_entry = {
        "alert_text": alert_text,
        "parsed_alert": parsed_alert.model_dump(),
        "llm_response": llm_response,
        "decision": decision,
    }
    with open("alerts_log.jsonl", "a") as f:
        f.write(json.dumps(log_entry) + "\n")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    llm_client = LLMClient()

    test_alerts = [
        # 1. –ñ—ë—Å—Ç–∫–∞—è –∞—Ç–∞–∫–∞ SSH + credential stuffing ‚Üí –æ–∂–∏–¥–∞–µ–º Block
        {
            "text": "[ALERT][HIGH] ssh | IP: 192.168.1.100 had 7 ssh failures and 2 credential stuffing attempts",
            "expected_action": "block"
        },
        # 2. –õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –≤–µ–±-–ª–æ–≥–∏–Ω–∞—Ö ‚Üí –æ–∂–∏–¥–∞–µ–º Monitor
        {
            "text": "[ALERT][MEDIUM] web_login_failed | IP: 192.168.1.101 had 3 login failures",
            "expected_action": "monitor"
        },
        # 3. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–≥–∏–Ω—ã —Å unusual usernames ‚Üí –æ–∂–∏–¥–∞–µ–º Investigate
        {
            "text": "[ALERT][HIGH] ssh | IP: 172.16.0.50 trying to login with unusual usernames",
            "expected_action": "investigate"
        },
        # 4. –õ—ë–≥–∫–æ–µ –ø–æ—Ä—Ç-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí –æ–∂–∏–¥–∞–µ–º Monitor
        {
            "text": "[ALERT][MEDIUM] port_scan | IP: 10.0.0.15 detected scanning ports 22, 80, 443",
            "expected_action": "monitor"
        },
        # 5. –õ–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞: –µ–¥–∏–Ω–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-–ª–æ–≥–∏–Ω–∞ ‚Üí –æ–∂–∏–¥–∞–µ–º Ignore
        {
            "text": "[ALERT][INFO] web_login_failed | IP: 192.168.1.102 had 1 login failure",
            "expected_action": "ignore"
        }
    ]

    correct = 0
    total = len(test_alerts)

    for alert in test_alerts:
        alert_text = alert["text"]
        expected_action = alert["expected_action"]

        parsed_alert = parse_alert(alert_text)
        parsed_alert = analyze_alert(alert_text, parsed_alert)

        policy_text = retrieve_context(parsed_alert.event_category, parsed_alert.severity)
        prompt = build_prompt(parsed_alert.model_dump(), policy_text)

        llm_response = llm_client.query(prompt)
        decision = parse_llm_response(llm_response)

        print("\nüîµ Processing Alert:", alert_text)
        print(f"üí¨ LLM Response:\n{llm_response}")

        if decision:
            print(f"üöÄ Parsed Decision: {decision}")
            print(f"üéØ Expected Action: {expected_action}")
            if decision['action'] == expected_action:
                print("‚úÖ Correct Decision")
                correct += 1
            else:
                print("‚ùå Incorrect Decision")
        else:
            print("‚ùå Could not parse decision.")

    print("\nüìà Final Stats:")
    print(f"Correct decisions: {correct}/{total} ({(correct / total) * 100:.2f}%)")

if __name__ == "__main__":
    main()
