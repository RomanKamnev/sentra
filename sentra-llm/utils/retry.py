import time
from functools import wraps
from typing import Callable, Type, Tuple

def retry(
        exceptions: Tuple[Type[BaseException], ...],
        max_retries: int = 3,
        backoff_factor: float = 2.0,
        initial_delay: float = 2.0,
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö.

    Args:
        exceptions: –ö–æ—Ä—Ç–µ–∂ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
        backoff_factor: –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏.
        initial_delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ max_retries.
    """
    def decorator(func: Callable):
        @wraps(func)
        def wrapper(*args, **kwargs):
            delay = initial_delay
            for attempt in range(1, max_retries + 1):
                try:
                    return func(*args, **kwargs)
                except exceptions as e:
                    print(f"‚ö†Ô∏è Error on attempt {attempt}: {e}")
                    if attempt == max_retries:
                        print("‚ùå Max retries exceeded. Raising exception.")
                        raise
                    print(f"üîÑ Retrying in {delay:.1f} seconds...")
                    time.sleep(delay)
                    delay *= backoff_factor
        return wrapper
    return decorator
